{"version":3,"sources":["ts/Keyboard.ts","ts/constants.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.b5c1b965.js","sourceRoot":"../src","sourcesContent":["export enum KeyCode {\n  ESC = 27,\n  SPACE = 32,\n  LEFT = 37,\n  UP = 38,\n  RIGHT = 39,\n  DOWN = 40,\n}\n\ntype listener = () => void;\ntype deps = {\n  [dep: string]: listener[]; \n}\n\nexport default class Keyboard {\n  private deps: deps;\n  constructor() {\n    this.deps = {};\n    document.addEventListener(\"keydown\", (e:KeyboardEvent) => {\n      e.preventDefault();\n      this.publish(<KeyCode>e.keyCode)\n    })      \n  }\n  hasOwn(obj: deps, keyCode: KeyCode) {\n    return Object.prototype.hasOwnProperty.call(obj, keyCode);\n  }\n  on(keyCode: KeyCode, listener: listener) {\n    if(!this.hasOwn(this.deps, keyCode)) { this.deps[keyCode] = [] };\n\n    this.deps[keyCode].push(listener);\n  }\n  publish(keyCode: KeyCode) {\n    if(!this.hasOwn(this.deps, keyCode)) { return }\n\n    this.deps[keyCode].forEach(listener => listener())\n  }\n}","export const COLUMN_COUNTS = 10;\nexport const ROW_COUNTS = 20;\nexport const BLOCK_SIZE = 30;","import Keyboard, { KeyCode } from './Keyboard';\nimport { COLUMN_COUNTS, ROW_COUNTS, BLOCK_SIZE } from './constants';\n\nconst $ = document.querySelector.bind(document);\n\nclass Canvas{\n  private ctx: CanvasRenderingContext2D;\n  private $canvas: HTMLCanvasElement;\n  constructor({\n    $canvas,\n    width,\n    height,\n    scale,\n  }: {\n    $canvas: HTMLCanvasElement,\n    width: number,\n    height: number,\n    scale: number,\n  }) {\n    const ctx = <CanvasRenderingContext2D>$canvas.getContext('2d')\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.scale(scale, scale);\n    this.$canvas = $canvas;\n    this.ctx = ctx;\n  }\n  clear() {\n    this.ctx.clearRect(0, 0, this.$canvas.width, this.$canvas.height)\n  }\n  drawBlock(block: Matrix, offset: Pos) {\n    block.forEach((row, y) => {\n      row.forEach((v, x) => {\n        if(v !== 0) {\n          this.ctx.fillRect(x + offset.x, y + offset.y, 1, 1);\n        }\n      })\n    })\n  }\n  drawArena(arena: Matrix) {\n    arena.forEach((row, y) => {\n      row.forEach((v, x) => {\n        if(v !== 0) {\n          this.ctx.fillRect(x, y, 1, 1);\n        }\n      })\n    })\n  }\n}\n\nclass Board {\n  private $score: HTMLSpanElement;\n  constructor({\n    $score,\n  }: {\n    $score: HTMLSpanElement,\n  }) {\n    this.$score = $score;\n  }\n  setScore(score: string | number) {\n    this.$score.innerText = String(score);\n  }\n}\n\nclass Game {\n  private readonly canvas: Canvas;\n  private readonly board: Board;\n  private readonly keyboard: Keyboard;\n\n  private readonly dropInterval = 1000;\n  private lastTime = 0;\n  private dropCounter = 0;\n\n  private readonly blockNames = 'ILJOTSZ';\n  private arena: Matrix;\n  private block: Matrix;\n  private playerPos: Pos;\n  private score = 0;\n  private rafId: number | null = null;\n  constructor(canvas: Canvas, board: Board, keyboard: Keyboard) {\n    this.canvas = canvas;\n    this.board = board;\n    this.keyboard = keyboard;\n    this.arena = this.createArena();\n    this.block = this.createBlock(this.getRandomBlockName());\n    this.playerPos = this.createPlayerDefaultPos();\n    this.attachKeyboardEvent();\n    this.update();\n  }\n  createPlayerDefaultPos(): Pos {\n    return {\n      x: 3,\n      y: 0,\n    }\n  }\n  createArena(): Matrix {\n    return [...new Array(ROW_COUNTS)].map(() => new Array(COLUMN_COUNTS).fill(0))\n  }\n  createBlock(shape: string) {\n    switch(shape) {\n      case 'T':\n        return [\n          [0, 0, 0],\n          [1, 1, 1],\n          [0, 1, 0],\n        ]\n      case 'O':\n        return [\n          [1, 1],\n          [1, 1],\n        ]\n      case 'L':\n        return [\n          [0, 1, 0],\n          [0, 1, 0],\n          [0, 1, 1],\n        ]\n      case 'J':\n        return [\n          [0, 1, 0],\n          [0, 1, 0],\n          [1, 1, 0],\n        ]\n      case 'I':\n        return [\n          [0, 1, 0, 0],\n          [0, 1, 0, 0],\n          [0, 1, 0, 0],\n          [0, 1, 0, 0],\n        ]\n      case 'S':\n        return [\n          [0, 1, 1],\n          [1, 1, 0],\n          [0, 0, 0],\n        ]\n      case 'Z':\n        return [\n          [1, 1, 0],\n          [0, 1, 1],\n          [0, 0, 0],\n        ]\n      default:\n        throw new Error(\"invalid block!\")\n    }\n  }\n  getRandomBlockName() {\n    return this.blockNames[Math.floor(this.blockNames.length * Math.random())]\n  }\n  resetBlock() {\n    this.block = this.createBlock(this.getRandomBlockName())\n  }  \n  resetPlayerPos() {\n    this.playerPos = this.createPlayerDefaultPos();\n  }  \n  toRightPlayerPos() {\n    const nextPlayerPos = {\n      ...this.playerPos,\n      x: this.playerPos.x + 1\n    }\n    if(!this.isCollideSide(nextPlayerPos)) {\n      this.playerPos = nextPlayerPos;\n    }\n  }\n  toLeftPlayerPos() {\n    const nextPlayerPos = {\n      ...this.playerPos,\n      x: this.playerPos.x - 1\n    }\n    if(!this.isCollideSide(nextPlayerPos)) {\n      this.playerPos = nextPlayerPos;\n    }\n  }\n  toDownPlayerPos() {\n    const nextPlayerPos = {\n      ...this.playerPos,\n      y: this.playerPos.y + 1\n    }\n    if(this.isCollideBottom(nextPlayerPos)) {\n      this.merge();\n      this.sweepArena();\n      this.resetBlock();\n      this.resetPlayerPos();\n    } else {\n      this.playerPos = nextPlayerPos;\n    }\n  }  \n  toFallPlayerPos() {\n    let nextPlayerPos = {\n      ...this.playerPos,\n      y: this.playerPos.y + 1\n    }\n    while(!this.isCollideBottom(nextPlayerPos)) {\n      this.playerPos = nextPlayerPos;\n      nextPlayerPos = {\n        ...this.playerPos,\n        y: this.playerPos.y + 1\n      }      \n    }\n    this.merge();\n    this.sweepArena();\n    this.resetBlock();\n    this.resetPlayerPos();\n  }\n  sweepArena() {\n    const { arena } = this\n    let deletedRowCount = 0\n    out: for(let y = arena.length - 1; y > 0; y--) {\n      for(let x = 0; x < arena[y].length; x++) {\n        if(arena[y][x] === 0) {\n          continue out;\n        }\n      }\n      arena.pop()\n      arena.unshift(new Array(COLUMN_COUNTS).fill(0))\n      deletedRowCount++;\n      y++;\n    }\n    const scoreToAdd = deletedRowCount * 1000;\n    if(scoreToAdd !== 0) {\n      this.addScore(scoreToAdd);\n      this.drawScore();\n    }\n  }\n  addScore(scoreToAdd: number) {\n    this.score += scoreToAdd\n  }\n  drawScore() {\n    this.board.setScore(this.score);\n  }\n  rotate() {\n    const { block } = this;\n    let result = [];\n    for(let i = 0; i < block[0].length; i++) {\n      let row = block.map(e => e[i]).reverse();\n      result.push(row);\n    }\n    this.block = result;\n    while(this.isCollideLeft(this.playerPos))  {\n      this.playerPos = {\n        ...this.playerPos,\n        x: this.playerPos.x + 1,\n      }\n    }\n    while(this.isCollideRight(this.playerPos)) {\n      this.playerPos = {\n        ...this.playerPos,\n        x: this.playerPos.x - 1,\n      }\n    }\n  }\n  merge() {\n    const { block, arena, playerPos } = this;\n    block.forEach((row, y) => {\n      row.forEach((v, x) => {\n        if (v !== 0) {\n          arena[y + playerPos.y][x + playerPos.x] = v;\n        }\n      })\n    })\n  }\n  isCollideLeft(playerPos: Pos) {\n    const { block, arena } = this\n    for(let y = 0; y < block.length; y++) {\n      for(let x = 0; x < block[y].length; x++) {\n        if(\n          block[y][x] !== 0 &&\n          (\n            x + playerPos.x < 0 ||\n            arena[y + playerPos.y][x + playerPos.x] !== 0\n          )\n        ) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n  isCollideRight(playerPos: Pos) {\n    const { block, arena } = this\n    for(let y = 0; y < block.length; y++) {\n      for(let x = 0; x < block[y].length; x++) {\n        if(\n          block[y][x] !== 0 &&\n          (\n            x + playerPos.x >= this.arena[0].length ||\n            arena[y + playerPos.y][x + playerPos.x] !== 0\n          )\n        ) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n  isCollideSide(playerPos: Pos){\n    const { block, arena } = this\n    for(let y = 0; y < block.length; y++) {\n      for(let x = 0; x < block[y].length; x++) {\n        if(\n          block[y][x] !== 0 &&\n          (\n            x + playerPos.x < 0 ||\n            x + playerPos.x >= this.arena[0].length ||\n            arena[y + playerPos.y][x + playerPos.x] !== 0\n          )\n        ) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n  isCollideBottom(playerPos: Pos) {\n    const { block, arena } = this\n    for(let y = 0; y < block.length; y++) {\n      for(let x = 0; x < block[y].length; x++) {\n        if(\n          block[y][x] !== 0 &&\n          (\n            ( arena[y + playerPos.y] && arena[y + playerPos.y][x + playerPos.x] !== 0 ) ||\n            y + playerPos.y === 20\n          )\n        ){\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isLose() {\n    const { arena } = this\n    const topRow = arena[0]\n    for(let i = 0; i < topRow.length; i++) {\n      if(topRow[i] === 1) {\n        return true\n      }\n    }\n    return false\n  }\n  draw() {\n    this.canvas.clear();\n    this.canvas.drawBlock(this.block, this.playerPos);\n    this.canvas.drawArena(this.arena);\n  }  \n  update(time = 0) {\n    const deltaTime = time - this.lastTime;\n    this.lastTime = time;\n    this.dropCounter += deltaTime;\n    if(this.dropCounter > this.dropInterval){\n      this.toDownPlayerPos();\n      this.dropCounter = 0;\n    }\n    this.draw();\n    if(this.isLose()){\n      this.rafId && cancelAnimationFrame(this.rafId)\n      return alert(`score : ${this.score}`)\n    }    \n    this.rafId = requestAnimationFrame(this.update.bind(this));\n  }\n  attachKeyboardEvent() {\n    this.keyboard.on(KeyCode.DOWN, () => {\n      this.toDownPlayerPos()\n    })\n    this.keyboard.on(KeyCode.LEFT, () => {\n      this.toLeftPlayerPos()\n    })\n    this.keyboard.on(KeyCode.RIGHT, () => {\n      this.toRightPlayerPos()\n    })\n    this.keyboard.on(KeyCode.UP, () => {\n      this.rotate()\n    })\n    this.keyboard.on(KeyCode.SPACE, () => {\n      this.toFallPlayerPos()\n    })\n  }  \n}\nconst $gameCanvas = <HTMLCanvasElement>$('.tetris__canvas');\nconst $scoreElem = <HTMLSpanElement>$(\".tetris__score\")\nconst canvas = new Canvas({\n  $canvas: $gameCanvas,\n  width: COLUMN_COUNTS * BLOCK_SIZE,\n  height: ROW_COUNTS * BLOCK_SIZE,\n  scale: BLOCK_SIZE,\n});\nconst board = new Board({\n  $score: $scoreElem,\n})\nconst keyboard = new Keyboard();\nnew Game(canvas, board, keyboard);"]}